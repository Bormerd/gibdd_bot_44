"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from database.models import User, Admin, Role, UserRole, Patrol
from filters.inspector import IsInspector


ADMIN_KEYBOARD = [
    [
        KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞"),
        KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–æ–≤"),
    ],
    [
        KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"),
    ],
]


def get_keyboard_by_user(user: User):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    admin: Admin = Admin.get_or_none(user=user)
    keyboard = ADMIN_KEYBOARD + [
        [
            (
                KeyboardButton(text="–ù–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–µ–≤–∏–¥—Ü–µ–≤")
                if admin and admin.is_notify
                else KeyboardButton(text="–ü–æ–ª—É—á–∞—Ç—å —Å–æ–æ—â–µ–Ω–∏—è –æ—á–µ–≤–∏–¥—Ü–µ–≤")
            )
        ]
    ]
    return keyboard


def get_kb_by_user(user: User):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = get_keyboard_by_user(user)
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
    )


def get_kb_by_show_employees(role: Role, page: int, limit: int = 10):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    role_object = role if isinstance(role, Role) else Role.get_by_id(role)

    inspector_in_patrol = {
        p.inspector_id
        for p in Patrol.select(Patrol.inspector)
        .where(Patrol.end.is_null())
    } if IsInspector.role == role_object else set()

    inline_keyboard = [
        [
            InlineKeyboardButton(
                text=(f"{'üö® ' if ur.user.id in inspector_in_patrol else ''}"
                      f"{ur.user.full_name}"
                      ),
                callback_data=f"user_info_{ur.user.id}",
            )
        ]
        for ur in UserRole.select()
        .where(UserRole.role == role_object)
        .offset((page - 1) * limit)
        .limit(limit)
    ]
    last_row = []
    if page > 1:
        last_row.append(
            InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data=f"users_page_{role}_{page-1}",
            )
        )

    last_row.append(
        InlineKeyboardButton(
            text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}",
            callback_data="alert",
        )
    )

    if len(inline_keyboard) == limit:
        last_row.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥",
                callback_data=f"users_page_{role}_{page+1}",
            )
        )

    if last_row:
        inline_keyboard.append(last_row)

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
